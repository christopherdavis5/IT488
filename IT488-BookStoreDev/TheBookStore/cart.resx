<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>